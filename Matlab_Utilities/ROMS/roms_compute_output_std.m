function status = roms_compute_output_std(output_dir, output_prefix, var_list)
%=========================================================================%
% status = roms_compute_output_std(output_dir, output_prefix)
% Computes the temporal standard deviations of the variables listed in 
% 'var_list' from the ROMS output located in the directory 'output_dir', 
% assuming the data files have the format 'prefix'_####.nc, where #### is 
% the timestamp of the output.  The resulting data is saved to 
% 'output_prefix'_std.nc.
%=========================================================================%
% By Arin Nelson on 10/18/2020
% Last updated on 02/08/2021
%=========================================================================%

  % Ensure output directory ends with a \
  if( ~strcmp(output_dir(end),'\') ); output_dir(end+1) = '\'; end

  % Gather list of data files in the directory
  output_list = ls([output_dir output_prefix '_*.nc']);
  n_outputs   = size(output_list,1);

  % Gather file information from the first data file
  info_in = ncinfo([output_dir output_list(1,:)]);

  % Gather spatial and time dimensions
  dim_names = {info_in.Dimensions.Name};
  xi        =  info_in.Dimensions( strcmp(dim_names,'xi_rho')  ).Length;
  eta       =  info_in.Dimensions( strcmp(dim_names,'eta_rho') ).Length;
  s         =  info_in.Dimensions( strcmp(dim_names,'s_rho') ).Length;
  n_times   =  info_in.Dimensions( strcmp(dim_names,'ocean_time')==1 ).Length;
  clear dim_names;

  % The output file info structure
  info_out          = struct;
  info_out.Filename = [output_prefix '_std.nc'];
  info_out.Name     = '/';
  info_out.Format   = '64bit';

  % Define the global attributes
  info_out.Attributes = struct;
  info_out.Attributes(1).Name  = 'type';
  info_out.Attributes(1).Value = 'STANDARD DEVIATION file';
  info_out.Attributes(2).Name  = 'history';
  info_out.Attributes(2).Value = ['Generated by roms_compute_output_std on ' datestr(now)];

  % Define the dimensions
  dim_name  = {'xi_rho','xi_u','xi_v','xi_psi','eta_rho','eta_u','eta_v','eta_psi','s_rho','s_w'};
  dim_value = [xi,xi-1,xi,xi-1,eta,eta,eta-1,eta-1,s,s+1];
  info_out.Dimensions = struct;
  for i=1:numel(dim_name)
    info_out.Dimensions(i).Name = dim_name{i};    
    info_out.Dimensions(i).Length = dim_value(i); 
  end
  clear i dim_name dim_value;

  % Define the variables & remove the time dimension
  for i=1:numel(var_list)
    info_out.Variables(i) = info_in.Variables( strcmp({info_in.Variables.Name},var_list{i})==1 );
    info_out.Variables(i).Dimensions( strcmp({info_out.Variables(i).Dimensions.Name},'ocean_time') ) = [];
  end
  clear i;

  % Generate the output file
  ncwriteschema([output_prefix '_std.nc'],info_out);

  % Compute standard deviations for one variable at a time 
  for i=1:numel(var_list)

    % Variable info
    var_size = info_out.Variables(i).Size;
    
    % Get number of depth levels
    if(numel(var_size)==3)
      n_depth = 1;
    else
      n_depth = var_size(3);
    end
  
    % Loop through depths
    for j=1:n_depth
    clc; disp(['Computing std for variable ' var_list{i} ', depth level ' num2str(j) ' of ' num2str(n_depth) '...']);    
      
      % Init the variable
      tmp = zeros([var_size(1:2) n_outputs*n_times]);
      n   = 1;
      
      % Loop through times
      for k=1:n_outputs
       
        % Time indices
        kk = n:(n+n_times-1);
      
        % Load
        if(n_depth==1)
          tmp(:,:,kk) = ncread([output_dir output_list(k,:)],info_out.Variables(i).Name);
        else
          tmp(:,:,kk) = squeeze( ncread([output_dir output_list(k,:)],info_out.Variables(i).Name,[1 1 j 1],[inf inf 1 inf]) );  
        end
        
        % Next step
        n = n+n_times;
        
      end
      clear k n;
    
      % Compute the std
      tmpstd = std(tmp,0,3);
      tmpstd(isnan(tmpstd)) = zeros;
    
      % Save
      if(n_depth==1)
        ncwrite(info_out.Filename,info_out.Variables(i).Name,tmpstd);  
      else
        ncwrite(info_out.Filename,info_out.Variables(i).Name,tmpstd,[1 1 j]);    
      end
    
      % Clean-up
      clear tmp tmpstd;
      
    end
    clear j;
  
    % Clean-up
    clear n_depth var_size

  end
  clear i;

  % If made it this far, operation was successful!
  status = 1;

end