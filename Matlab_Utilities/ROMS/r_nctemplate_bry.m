function info = r_nctemplate_bry(spherical,WSEN)
%=========================================================================%
% info = r_nctemplate_ini(spherical,WSEN)
% 
% Generate a structure containing dimension and variable information of a
% typical ROMS initial conditions NetCDF file.  Dimension lengths and
% variable values are initially blank, but can be set manually.
% 
% Alternately, calling r_ncgen_ini will generate a template initial 
% conditions NetCDF file with dimension lengths and variable values present 
% in the roms.in file specified by this function.
%=========================================================================%
% by Arin Nelson on 09/23/2020
%=========================================================================%

% Define the dimension names and indices
info.dims = struct;
info.dims(01).name = 'xi_rho';     
info.dims(02).name = 'xi_u';       
info.dims(03).name = 'xi_v';         
info.dims(04).name = 'eta_rho';    
info.dims(05).name = 'eta_u';     
info.dims(06).name = 'eta_v';        
info.dims(07).name = 's_rho';      
info.dims(08).name = 's_w';        
info.dims(09).name = 'tracer';     
info.dims(10).name = 'bry_time';

% Define the global attributes
info.atts = struct;
info.atts(1).name = 'type';
info.atts(2).name = 'history';

% Set the global attributes
info.atts(1).value = 'BOUNDARY file';
info.atts(2).value = ['Initialized by r_nctemplate_bry at ' datestr(now) '.'];

% Define the vertical grid configuration variables
info.vars = [];
info.vars(end+1).name = 'spherical';
info.vars(end  ).info = {'type','NC_INT'; ...
                           'dimid',[]; ...
                           'long_name','grid type logical switch'; ...
                           'flag_values',[0 1]; ...
                           'flag_meanings','Cartesian, Spherical'};
info.vars(end+1).name = 'Vtransform';
info.vars(end  ).info = {'type','NC_INT'; ...
                           'dimid',[]; ...
                           'long_name','vertical terrain-following transformation equation'};
info.vars(end+1).name = 'Vstretching';
info.vars(end  ).info = {'type','NC_INT'; ...
                           'dimid',[]; ...
                           'long_name','vertical terrain-following stretching function'};
info.vars(end+1).name = 'theta_s';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[]; ...
                           'long_name','S-coordinate surface control parameter'};                
info.vars(end+1).name = 'theta_b';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[]; ...
                           'long_name','S-coordinate bottom control parameter'};                       
info.vars(end+1).name = 'Tcline';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[]; ...
                           'long_name','S-coordinate surface/bottom layer width'; ...
                           'units','meters'};     
info.vars(end+1).name = 'hc';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[]; ...
                           'long_name','S-coordinate parameter, critical depth'; ...
                           'units','meters'};   
info.vars(end+1).name = 's_rho';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[8]; ...
                           'long_name','S-coordinate at RHO-points'; ...
                           'valid_min',-1; ...
                           'valid_max',0; ...
                           'positive','up'; ...
                           'standard_name','ocean_s_coordinate_g(Vtransform)'; ...
                           'formula_terms','s: s_rho C: Cs_r eta: zeta depth: h depth_c: hc' };
info.vars(end+1).name = 's_w';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[9]; ...
                           'long_name','S-coordinate at W-points'; ...
                           'valid_min',-1; ...
                           'valid_max',0; ...
                           'positive','up'; ...
                           'standard_name','ocean_s_coordinate_g(Vtransform)'; ...
                           'formula_terms','s: s_w C: Cs_w eta: zeta depth: h depth_c: hc' };
info.vars(end+1).name = 'Cs_r';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[8]; ...
                           'long_name','S-coordinate stretching function at RHO-points'; ...
                           'valid_min',-1; ...
                           'valid_max',0 };
info.vars(end+1).name = 'Cs_w';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                           'dimid',[9]; ...
                           'long_name','S-coordinate stretching function at W-points'; ...
                           'valid_min',-1; ...
                           'valid_max',0 };

% Horizontal grid variable names
if(spherical)
  grd_vars = {'lon','lat'};
  grd_long = {'longitude','latitude'};
  grd_unit = {'degrees_east','degrees_north'};
else
  grd_vars = {'x','y'};
  grd_long = {'X-value','Y-value'};
  grd_unit = {'meters_east','meters_north'};
end

%--------------------------------------------------------------------------
% Grid variables (rho)
if(WSEN(1))
  info.vars(end+1).name = [grd_vars{1} '_rho_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[3]; ...
                              'long_name',[grd_long{1} ' at RHO-points, western boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_rho_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[3]; ...
                             'long_name',[grd_long{2} ' at RHO-points, western boundary condition']; ...
                             'units',grd_unit{2}, ...
                             'standard_name',grd_long{2} };  
end
if(WSEN(3))
  info.vars(end+1).name = [grd_vars{1} '_rho_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[3]; ...
                              'long_name',[grd_long{1} ' at RHO-points, eastern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_rho_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[3]; ...
                              'long_name',[grd_long{2} ' at RHO-points, eastern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(2))
  info.vars(end+1).name = [grd_vars{1} '_rho_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[0]; ...
                              'long_name',[grd_long{1} ' at RHO-points, southern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_rho_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[0]; ...
                              'long_name',[grd_long{2} ' at RHO-points, southern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(4))
  info.vars(end+1).name = [grd_vars{1} '_rho_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[0]; ...
                              'long_name',[grd_long{1} ' at RHO-points, northern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_rho_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[0]; ...
                              'long_name',[grd_long{2} ' at RHO-points, northern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end

%--------------------------------------------------------------------------
% Grid variables (u)
if(WSEN(1))
  info.vars(end+1).name = [grd_vars{1} '_u_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[4]; ...
                              'long_name',[grd_long{1} ' at U-points, western boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_u_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[4]; ...
                              'long_name',[grd_long{2} ' at U-points, western boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(3))
  info.vars(end+1).name = [grd_vars{1} '_u_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[4]; ...
                              'long_name',[grd_long{1} ' at U-points, eastern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_u_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[4]; ...
                              'long_name',[grd_long{2} ' at U-points, eastern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(2))
  info.vars(end+1).name = [grd_vars{1} '_u_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[1]; ...
                              'long_name',[grd_long{1} ' at U-points, southern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_u_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[1]; ...
                              'long_name',[grd_long{2} ' at U-points, southern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(4))
  info.vars(end+1).name = [grd_vars{1} '_u_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[1]; ...
                              'long_name',[grd_long{1} ' at U-points, northern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_u_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[1]; ...
                              'long_name',[grd_long{2} ' at U-points, northern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end

%--------------------------------------------------------------------------
% Grid variables (v)
if(WSEN(1))
  info.vars(end+1).name = [grd_vars{1} '_v_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[5]; ...
                              'long_name',[grd_long{1} ' at V-points, western boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_v_west'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[5]; ...
                              'long_name',[grd_long{2} ' at V-points, western boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(3))
  info.vars(end+1).name = [grd_vars{1} '_v_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[5]; ...
                              'long_name',[grd_long{1} ' at V-points, eastern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_v_east'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[5]; ...
                              'long_name',[grd_long{2} ' at V-points, eastern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(2))
  info.vars(end+1).name = [grd_vars{1} '_v_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[2]; ...
                              'long_name',[grd_long{1} ' at V-points, southern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_v_south'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[2]; ...
                              'long_name',[grd_long{2} ' at V-points, southern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end
if(WSEN(4))
  info.vars(end+1).name = [grd_vars{1} '_v_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                              'dimid',[2]; ...
                              'long_name',[grd_long{1} ' at V-points, northern boundary condition']; ...
                              'units',grd_unit{1}; ...
                              'standard_name',grd_long{1} };
  info.vars(end+1).name = [grd_vars{2} '_v_north'];
  info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[2]; ...
                              'long_name',[grd_long{2} ' at V-points, northern boundary condition']; ...
                              'units',grd_unit{2}; ...
                              'standard_name',grd_long{2} };
end

%--------------------------------------------------------------------------
% OTHER VARIABLES

% Boundary time
info.vars(end+1).name = 'bry_time';
info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                         'dimid',[9]; ...
                         'long_name','time since initialization'; ...
                         'units','seconds'};
                     
% The rest of the variables (info)                     
out_vars = {'zeta','ubar','vbar','u','v','temp','salt'};
out_dims = {[0],[1],[2],[1 6],[2 6],[0 6],[0 6]};
out_dim2 = {[3],[4],[5],[4 6],[5 6],[3 6],[3 6]};
out_long = {'free-surface','vertically integrated u-momentum component','vertically integrated v-momentum component','u-monentum component','v-momentum component','potential temperature','salinity'};
out_unit = {'meters','meter second-1','meter second-1','meter second-1','meter second-1','Celsius','salinity'};
out_cord = {'rho','u','v'};

% The rest of the variables (defining)
for i=1:numel(out_vars)
  if(WSEN(1))
    info.vars(end+1).name = [out_vars '_west'];
    info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[out_dim2{i} 9]; ...
                             'long_name',[out_long{i} ', western boundary condition']; ...
                             'units',out_unit{i}; ...
                             'time','bry_time'; ...
                             'coordinates',[grd_vars{1} '_' out_cord(out_dims{i}(1)+1) '_west, ' grd_vars{2} '_' grd_cord(out_dims{i}(1)+1) '_west, bry_time'] };
  end
  if(WSEN(3))
    info.vars(end+1).name = [out_vars '_east'];
    info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[out_dim2{i} 9]; ...
                             'long_name',[out_long{i} ', eastern boundary condition']; ...
                             'units',out_unit{i}; ...
                             'time','bry_time'; ...
                             'coordinates',[grd_vars{1} '_' out_cord(out_dims{i}(1)+1) '_east, ' grd_vars{2} '_' grd_cord(out_dims{i}(1)+1) '_east, bry_time'] };
  end
  if(WSEN(2))
    info.vars(end+1).name = [out_vars '_south'];
    info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[out_dims{i} 9]; ...
                             'long_name',[out_long{i} ', southern boundary condition']; ...
                             'units',out_unit{i}; ...
                             'time','bry_time'; ...
                             'coordinates',[grd_vars{1} '_' out_cord(out_dims{i}(1)+1) '_south, ' grd_vars{2} '_' grd_cord(out_dims{i}(1)+1) '_south, bry_time'] };
  end  
  if(WSEN(4))
    info.vars(end+1).name = [out_vars '_north'];
    info.vars(end  ).info = {'type','NC_DOUBLE'; ...
                             'dimid',[out_dims{i} 9]; ...
                             'long_name',[out_long{i} ', northern boundary condition']; ...
                             'units',out_unit{i}; ...
                             'time','bry_time'; ...
                             'coordinates',[grd_vars{1} '_' out_cord(out_dims{i}(1)+1) '_north, ' grd_vars{2} '_' grd_cord(out_dims{i}(1)+1) '_north, bry_time'] };
  end  
end %1:numel(out_vars)
 
end %function